import React, { useState } from 'react';
import { useAuthState } from 'react-firebase-hooks/auth';
import { auth } from '../../../firebase';
import { addExpense } from '../../../backend/Account/ExpenseManagement/ExpenseService';
import Expense from '../../../models/ExpensesDataModel';

const AddExpenseForm = ({ onAddExpense }) => {
  const [title, setTitle] = useState('');
  const [amount, setAmount] = useState('');
  const [date, setDate] = useState('');
  const [category, setCategory] = useState('');
  const [description, setDescription] = useState('');
  const [user] = useAuthState(auth);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (isSubmitting) return;  // Prevent duplicate submissions
    setIsSubmitting(true);

    const newExpense = new Expense(
      null, // ID will be generated by Firestore
      title,
      parseFloat(amount),
      date,
      category,
      description
    );

    console.log('Submitting new expense:', newExpense);  // Debugging log

    // Add the new expense to Firestore
    const expenseId = await addExpense(user.email, newExpense);

    // Fetch the newly created expense with its unique ID (if necessary)
    onAddExpense({ ...newExpense, id: expenseId });

    // Reset form fields
    setTitle('');
    setAmount('');
    setDate('');
    setCategory('');
    setDescription('');
    setIsSubmitting(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" placeholder="Title" value={title} onChange={(e) => setTitle(e.target.value)} required />
      <input type="number" placeholder="Amount" value={amount} onChange={(e) => setAmount(e.target.value)} required />
      <input type="date" value={date} onChange={(e) => setDate(e.target.value)} required />
      <input type="text" placeholder="Category" value={category} onChange={(e) => setCategory(e.target.value)} required />
      <textarea placeholder="Description" value={description} onChange={(e) => setDescription(e.target.value)}></textarea>
      <button type="submit" disabled={isSubmitting}>Add Expense</button>
    </form>
  );
};

export default AddExpenseForm;
